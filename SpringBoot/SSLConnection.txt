
ApplicationContextUtils.getApplicationContext().getEnvironment()

server.port=8443

server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=password
server.ssl.key-alias=tomcat

security.require-ssl=true

# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
server.ssl.key-store=classpath:keystore/baeldung.p12
# The password used to generate the certificate
server.ssl.key-store-password=password
# The alias mapped to the certificate
server.ssl.key-alias=baeldung

Since we are using Spring Security enabled application, let's configure it to accept only HTTPS requests:

server.ssl.enabled=true


server.ssl.key-store-type=JKS
server.ssl.key-store=classpath:keystore/baeldung.p12
server.ssl.key-store-password=changeit
server.ssl.key-alias=baeldung
security.require-ssl=true



Check a stand-alone certificate
	keytool -printcert -v -file mydomain.crt
Check which certificates are in a Java keystore
	keytool -list -v -keystore keystore.jks
Check a particular keystore entry using an alias
	keytool -list -v -keystore keystore.jks -alias mydomain
	
Java will only use the store that is referenced by the -Djavax.net.ssl.trustStore system property to look for certificates to trust when creating SSL connections. Same for keys and -Djavax.net.ssl.keyStore

