https://docs.spring.io/spring-framework/docs/3.0.x/spring-framework-reference/html/jdbc.html

spring.datasource.hikari.enabled=false

SELECT * FROM test WHERE col1 = #{jobParameters['col1']

@Bean
@Primary
public JdbcTemplate igniteTemplate() {
    return new JdbcTemplate(igniteDataSource());
}


@Bean
public JdbcTemplate dbjdbcTemplate() {
    return new JdbcTemplate(dataSource());
}

No.	Method																Description
1.	public int update(String query)										It is used to INSERT, UPDATE and DELETE records.
2.	public int update(String query, Object... args)						It is used to INSERT, UPDATE and DELETE records by using the PreparedStatement.
3.	public void execute(String query)									It is used to execute the DDL (i.e. Data Definition Language) query.-ok 
4.	public T execute(String sql, PreparedStatementCallbackaction)		It executes the query by using the PreparedStatement callback method.
5.	public T query(String sql, ResultSetExtractor resultSetExtratObj)	It is used to fetch the records using the ResultSetExtractor interface.
6.	public List query(String sql, RowMapper rowMapperObj)				It is used to fetch the records using RowMapper.


Spring JDBC - who does what?

Action															Spring		You
Define connection parameters.												X
Open the connection.											X	 
Specify the SQL statement.	 												X
Declare parameters and provide parameter values	 							X
Prepare and execute the statement.								X	 
Set up the loop to iterate through the results (if any).		X	 
Do the work for each iteration.	 											X
Process any exception.											X	 
Handle transactions.											X	 
Close the connection, statement and resultset.					X	 


NamedParameterJdbcTemplate
==========================
public List<Dog> listByBreedIdAndGender(long breedId, String gender) {  
   return jdbcTemplate.query("SELECT * FROM dog_entity WHERE breed__id = :breedId AND gender =:gender", 
      new MapSqlParameterSource()
      .addValue("breedId", breedId)
      .addValue("gender", gender));
}


JdbcTemplate
============
public List<Dog> listByBreedIdAndGender(long breedId, String gender) {  
       return jdbcTemplate.query
          ("SELECT * FROM dog_entity WHERE breed__id = ? AND gender = ?",
          new Object[] { breedId, gender }, 
          new DogRowMapper());         
}


======================================================================================================================
	@Bean (name = "dataSource1")
    @Primary
    @ConfigurationProperties(prefix = "ds1.datasource")
    public DataSource dataSource1() {
        return DataSourceBuilder.create().build();
    }

    @Bean(name = "ds1")
    public JdbcTemplate jdbcTemplate1(@Qualifier("dataSource1") DataSource dataSource1) {
        return new JdbcTemplate(dataSource1);
    }

    @Bean (name = "dataSource2")
    @ConfigurationProperties(prefix="ds2.datasource")
    public DataSource dataSource2() { return DataSourceBuilder.create().build(); }

    @Bean(name = "ds2")
    public JdbcTemplate jdbcTemplate2(@Qualifier("dataSource2") DataSource dataSource2) {
        return new JdbcTemplate(dataSource2);
    }